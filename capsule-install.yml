---
# ===============================================================================
# Red Hat Satellite Capsule Installation Playbook
# Default Environment (Development)
# ===============================================================================
# This playbook automates the installation of Satellite Capsule servers using
# certificate tarballs and installation instructions generated by the 
# satellite install project
# ===============================================================================

- name: Install Red Hat Satellite Capsules
  hosts: all  # Target hosts in the 'capsules' group from inventory
  become: true
  gather_facts: true
  vars_files:
    - group_vars/all.yml  # Load default variables
  
  # Module defaults for all redhat.satellite collection operations
  module_defaults:
    group/redhat.satellite.satellite:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_setup_username }}"
      password: "{{ satellite_initial_admin_password }}"
      validate_certs: false
  
  # ============================================================================
  # PRE-TASKS: Validation and Prerequisites
  # ============================================================================
  pre_tasks:
    - name: Display playbook startup information
      ansible.builtin.debug:
        msg:
          - "============================================================"
          - "Starting Capsule Installation"
          - "============================================================"
          - "Target Capsule: {{ inventory_hostname }}"
          - "Satellite Server: {{ satellite_fqdn }}"
          - "Organization: {{ satellite_org }}"
          - "Activation Key: {{ capsule_activation_key }}"
          - "============================================================"
    
    # Determine RHEL version
    - name: Set RHEL major version fact
      ansible.builtin.set_fact:
        rhel_major_version: "{{ ansible_distribution_major_version | int }}"
    
    - name: Display host information
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} is running RHEL {{ rhel_major_version }}"
    
    # Validate target system
    - name: Validate system requirements
      ansible.builtin.assert:
        that:
          - ansible_distribution == "RedHat"
          - ansible_distribution_major_version == "9"
          - ansible_memtotal_mb >= 20480  # 20GB minimum RAM
        fail_msg: "System does not meet minimum requirements for Capsule installation"
        success_msg: "System meets minimum requirements"
    
    # Check if this host is in the capsule_fqdns list
    - name: Validate host is a designated Capsule
      ansible.builtin.assert:
        that:
          - inventory_hostname in capsule_fqdns
        fail_msg: |
          ERROR: Host '{{ inventory_hostname }}' is not in the capsule_fqdns list!
          Configured Capsules: {{ capsule_fqdns | join(', ') }}
        success_msg: "Host {{ inventory_hostname }} is a valid Capsule target"
    
    # DNS validation
    - name: Validate DNS resolution for Satellite
      ansible.builtin.command: "nslookup {{ satellite_fqdn }}"
      register: dns_check
      changed_when: false
      failed_when: false
      when: validate_dns | bool
    
    - name: Fail if Satellite DNS resolution failed
      ansible.builtin.fail:
        msg: "DNS resolution failed for Satellite {{ satellite_fqdn }}. Please fix DNS or set validate_dns to false"
      when:
        - validate_dns | bool
        - dns_check.rc != 0
    
    # Check for required certificate files
    - name: Check for certificate tarball
      ansible.builtin.stat:
        path: "{{ capsule_cert_base_path }}/{{ inventory_hostname }}-certs.tar"
      register: cert_tar_check
    
    - name: Check for installation instructions file
      ansible.builtin.stat:
        path: "{{ capsule_cert_base_path }}/{{ inventory_hostname }}-install.txt"
      register: install_txt_check
    
    - name: Validate required files exist
      ansible.builtin.assert:
        that:
          - cert_tar_check.stat.exists
          - install_txt_check.stat.exists
        fail_msg: |
          ERROR: Required certificate files not found!
          Missing files for {{ inventory_hostname }}:
          - Certificate tar: {{ cert_tar_check.stat.exists | ternary('Found', 'MISSING') }}
          - Install instructions: {{ install_txt_check.stat.exists | ternary('Found', 'MISSING') }}
          
          These files should have been distributed by the satellite-install project.
          Expected location: {{ capsule_cert_base_path }}/
        success_msg: "All required certificate files found"
    
    # Check if Capsule is already installed
    - name: Check if Capsule is already installed
      ansible.builtin.systemd:
        name: foreman-proxy
      register: foreman_proxy_check
      failed_when: false
      changed_when: false
    
    - name: Set Capsule installation status
      ansible.builtin.set_fact:
        capsule_already_installed: "{{ foreman_proxy_check.status.ActiveState | default('inactive') == 'active' }}"
    
    - name: Report Capsule installation status
      ansible.builtin.debug:
        msg: >-
          Capsule is {{ capsule_already_installed | ternary('ALREADY INSTALLED', 'NOT INSTALLED') }} on {{ inventory_hostname }}.
          {{ (capsule_already_installed and not force_reinstall) | ternary('Skipping installation.', 'Proceeding with installation.') }}
    
    # Determine if this Capsule is load-balanced
    - name: Determine if Capsule is load-balanced
      ansible.builtin.set_fact:
        is_loadbalanced_capsule: "{{ inventory_hostname in loadbalanced_capsules }}"
    
    - name: Display load balancer configuration
      ansible.builtin.debug:
        msg:
          - "Load Balancer Configuration:"
          - "  This Capsule is {{ is_loadbalanced_capsule | ternary('LOAD-BALANCED', 'STANDALONE') }}"
          - "  Load Balancer FQDN: {{ is_loadbalanced_capsule | ternary(capsule_loadbalancer_fqdn, 'N/A') }}"
      when: capsule_debug_output | bool
    
    # Create log directory if needed
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ installation_log_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: save_installation_logs | bool
  
  # ============================================================================
  # MAIN ROLES EXECUTION
  # ============================================================================
  roles:
    # Phase 1: Clean and prepare for registration
    - role: prep_capsule_registration
      when: not (capsule_already_installed and not force_reinstall)
      tags:
        - prep
        - registration
    
    # Phase 2: Register Capsule to Satellite
    - role: register_capsule
      when: not (capsule_already_installed and not force_reinstall)
      tags:
        - register
        - registration
    
    # Phase 3: Configure repositories
    - role: configure_capsule_repos
      when: not (capsule_already_installed and not force_reinstall)
      tags:
        - repos
        - repositories
    
    # Phase 4: Parse installation instructions
    - role: parse_install_instructions
      when: not (capsule_already_installed and not force_reinstall)
      tags:
        - parse
        - instructions
    
    # Phase 5: Install Capsule
    - role: install_capsule
      when: not (capsule_already_installed and not force_reinstall)
      tags:
        - install
        - capsule
  
  # ============================================================================
  # POST-TASKS: Verification and Reporting
  # ============================================================================
  post_tasks:
    # Verify Capsule installation
    - name: Verify Capsule services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
      register: service_status
      failed_when: false
      loop:
        - foreman-proxy
        - httpd
        - pulpcore-api
        - pulpcore-content
      when: 
        - verify_capsule_after_install | bool
        - not (capsule_already_installed and not force_reinstall)
    
    - name: Check Capsule health via API
      redhat.satellite.capsule_info:
        name: "{{ inventory_hostname }}"
      register: capsule_info
      failed_when: false
      when:
        - verify_capsule_after_install | bool
        - not (capsule_already_installed and not force_reinstall)
    
    # Save installation summary
    - name: Save installation summary
      ansible.builtin.copy:
        content: |
          Capsule Installation Summary
          ============================
          Date: {{ ansible_date_time.iso8601 }}
          Capsule FQDN: {{ inventory_hostname }}
          Satellite Server: {{ satellite_fqdn }}
          Organization: {{ satellite_org }}
          Load Balanced: {{ is_loadbalanced_capsule | ternary('Yes', 'No') }}
          {% if is_loadbalanced_capsule %}
          Load Balancer FQDN: {{ capsule_loadbalancer_fqdn }}
          {% endif %}
          Installation Status: {{ capsule_already_installed | ternary('Already Installed', 'Newly Installed') }}
          
          Services Status:
          {% for service in service_status.results | default([]) %}
          - {{ service.item }}: {{ service.status.ActiveState | default('unknown') }}
          {% endfor %}
          
          API Health Check: {{ capsule_info.failed | default(true) | ternary('Failed', 'Success') }}
        dest: "{{ installation_log_path }}/{{ inventory_hostname }}-summary-{{ ansible_date_time.epoch }}.txt"
        mode: '0644'
      when: save_installation_logs | bool
    
    # Final success message
    - name: Installation complete message
      ansible.builtin.debug:
        msg:
          - "============================================================"
          - "Capsule Installation Workflow Completed!"
          - "============================================================"
          - "Capsule: {{ inventory_hostname }}"
          - "Status: {{ capsule_already_installed | ternary('Already installed (skipped)', 'Successfully installed') }}"
          - "Load Balanced: {{ is_loadbalanced_capsule | ternary('Yes', 'No') }}"
          - "Next Steps:"
          - "  1. Verify Capsule appears in Satellite UI"
          - "  2. Assign Capsule to appropriate locations"
          - "  3. Configure content synchronization"
          - "  4. Test remote execution functionality"
          - "============================================================"
    
    # Set statistics for AAP
    - name: Set installation statistics
      ansible.builtin.set_stats:
        data:
          capsule_fqdn: "{{ inventory_hostname }}"
          satellite_server: "{{ satellite_fqdn }}"
          installation_status: "{{ capsule_already_installed | ternary('skipped', 'installed') }}"
          load_balanced: "{{ is_loadbalanced_capsule }}"
          installation_date: "{{ ansible_date_time.iso8601 }}"
      when: not (capsule_already_installed and not force_reinstall)