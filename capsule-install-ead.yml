---
# ===============================================================================
# Red Hat Satellite Capsule Installation Playbook
# Test Environment
# ===============================================================================
# This playbook automates the installation of Satellite Capsule servers using
# certificate tarballs and installation instructions generated by the 
# satellite install project
# ===============================================================================

- name: Install Red Hat Satellite Capsules - Test Environment
  hosts: all
  become: true
  gather_facts: true
  vars_files:
    - group_vars/ead_env.yml # Override with ead environment specifics
  
  # Module defaults for all redhat.satellite collection operations
  module_defaults:
    group/redhat.satellite.satellite:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_setup_username }}"
      password: "{{ satellite_initial_admin_password }}"
      validate_certs: false

  # ============================================================================
  # PRE-TASKS: Host Classification and Safety Checks
  # ============================================================================
  pre_tasks:
    - name: Determine if this host is a Capsule
      ansible.builtin.set_fact:
        is_capsule_host: "{{ inventory_hostname in capsule_fqdns }}"
      tags: always

    - name: Determine if this Capsule is load-balanced
      ansible.builtin.set_fact:
        is_loadbalanced_capsule: "{{ inventory_hostname in loadbalanced_capsules }}"
      when: is_capsule_host
      tags: always

    - name: Set installation control flags
      ansible.builtin.set_fact:
        will_install_capsule: "{{ is_capsule_host }}"
        will_run_api_checks: "{{ is_capsule_host }}"
      tags: always

    - name: Display host classification
      ansible.builtin.debug:
        msg:
          - "============================================================"
          - "Host Classification Report"
          - "============================================================"
          - "Hostname: {{ inventory_hostname }}"
          - "Is Capsule Host: {{ is_capsule_host | default(false) }}"
          - "Is Load-balanced: {{ is_loadbalanced_capsule | default(false) }}"
          - "Will Install Capsule: {{ will_install_capsule | default(false) }}"
          - "Will Run API Checks: {{ will_run_api_checks | default(false) }}"
          - "============================================================"

  # ============================================================================
  # MAIN ROLES - CAPSULE HOSTS ONLY
  # ============================================================================
  roles:
    # GATEKEEPER: All roles check is_capsule_host first
    - role: prep_capsule_registration
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      tags: [prep, registration]
    
    - role: register_capsule
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      tags: [register, registration]
    
    - role: configure_capsule_repos
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      tags: [repos, repositories]
    
    - role: parse_install_instructions
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      tags: [parse, instructions]
    
    - role: install_capsule
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      tags: [install, capsule]

  # ============================================================================
  # POST-TASKS: Properly Isolated by Host Type
  # ============================================================================
  post_tasks:
    # ========================================
    # CAPSULE-ONLY POST-INSTALLATION TASKS
    # ========================================
    - name: CAPSULE POST-TASKS - Service Verification
      when: 
        - is_capsule_host
        - will_install_capsule | default(false)
      block:
        - name: Verify all Capsule services are active
          ansible.builtin.systemd:
            name: "{{ item }}"
            state: started
          register: final_service_check
          loop:
            - foreman-proxy
            - httpd
            - pulpcore-api
            - pulpcore-content
          failed_when: false

        - name: Final Capsule health check using Hammer
          ansible.builtin.command: hammer capsule info --name "{{ inventory_hostname }}"
          register: final_capsule_check
          changed_when: false
          failed_when: false
          delegate_to: "{{ satellite_fqdn }}"
          become: true

        - name: Display final Capsule status
          ansible.builtin.debug:
            msg:
              - "================================================"
              - "CAPSULE INSTALLATION SUMMARY"
              - "================================================"
              - "Capsule: {{ inventory_hostname }}"
              - "Type: {{ is_loadbalanced_capsule | ternary('Load-balanced', 'Standard') }}"
              - "Services: {{ final_service_check.results | selectattr('status.ActiveState', 'equalto', 'active') | list | length }}/{{ final_service_check.results | length }} active"
              - "Satellite Registration: {{ 'Confirmed' if final_capsule_check.rc == 0 else 'Check logs' }}"
              - "Status: COMPLETE"
              - "================================================"

    # ========================================
    # NON-CAPSULE HOSTS
    # ========================================
    - name: Skip message for non-Capsule hosts
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }} is not a Capsule host - no actions performed"
      when: not is_capsule_host