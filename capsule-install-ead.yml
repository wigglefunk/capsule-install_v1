---
# ===============================================================================
# Red Hat Satellite Capsule Installation Playbook
# Test Environment
# ===============================================================================
# This playbook automates the installation of Satellite Capsule servers using
# certificate tarballs and installation instructions generated by the 
# satellite-install-6_10 project
# ===============================================================================

- name: Install Red Hat Satellite Capsules - Test Environment
  hosts: all
  become: true
  gather_facts: true
  vars_files:
    - group_vars/all.yml      # Load default variables
    - group_vars/test_env.yml # Override with test environment specifics
  
  # Module defaults for all redhat.satellite collection operations
  module_defaults:
    group/redhat.satellite.satellite:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_setup_username }}"
      password: "{{ satellite_initial_admin_password }}"
      validate_certs: false
  
  # ============================================================================
  # PRE-TASKS: Validation and Prerequisites
  # ============================================================================
  pre_tasks:
    - name: Display playbook startup information
      ansible.builtin.debug:
        msg:
          - "============================================================"
          - "Starting Capsule Installation - TEST ENVIRONMENT"
          - "============================================================"
          - "Target Capsule: {{ inventory_hostname }}"
          - "Satellite Server: {{ satellite_fqdn }}"
          - "Organization: {{ satellite_org }}"
          - "Activation Key: {{ capsule_activation_key }}"
          - "============================================================"
    
    # Include all pre-task validations from main playbook
    - name: Set RHEL major version fact
      ansible.builtin.set_fact:
        rhel_major_version: "{{ ansible_distribution_major_version | int }}"
    
    - name: Validate system requirements
      ansible.builtin.assert:
        that:
          - ansible_distribution == "RedHat"
          - ansible_distribution_major_version == "9"
          - ansible_memtotal_mb >= 20480
        fail_msg: "System does not meet minimum requirements for Capsule installation"
    
    - name: Validate host is a designated Capsule
      ansible.builtin.assert:
        that:
          - inventory_hostname in capsule_fqdns
        fail_msg: "Host '{{ inventory_hostname }}' is not in the capsule_fqdns list!"
    
    - name: Validate DNS resolution for Satellite
      ansible.builtin.command: "nslookup {{ satellite_fqdn }}"
      register: dns_check
      changed_when: false
      failed_when: false
      when: validate_dns | bool
    
    - name: Check for required certificate files
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ capsule_cert_base_path }}/{{ inventory_hostname }}-certs.tar"
        - "{{ capsule_cert_base_path }}/{{ inventory_hostname }}-install.txt"
      register: cert_files_check
    
    - name: Validate required files exist
      ansible.builtin.assert:
        that:
          - cert_files_check.results[0].stat.exists
          - cert_files_check.results[1].stat.exists
        fail_msg: "Required certificate files not found!"
    
    - name: Check if Capsule is already installed
      ansible.builtin.systemd:
        name: foreman-proxy
      register: foreman_proxy_check
      failed_when: false
      changed_when: false
    
    - name: Set Capsule installation status
      ansible.builtin.set_fact:
        capsule_already_installed: "{{ foreman_proxy_check.status.ActiveState | default('inactive') == 'active' }}"
    
    - name: Determine if Capsule is load-balanced
      ansible.builtin.set_fact:
        is_loadbalanced_capsule: "{{ inventory_hostname in loadbalanced_capsules }}"
    
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ installation_log_path }}"
        state: directory
        mode: '0755'
      when: save_installation_logs | bool
  
  # ============================================================================
  # MAIN ROLES EXECUTION
  # ============================================================================
  roles:
    - role: prep_capsule_registration
      when: not (capsule_already_installed and not force_reinstall)
      tags: [prep, registration]
    
    - role: register_capsule
      when: not (capsule_already_installed and not force_reinstall)
      tags: [register, registration]
    
    - role: configure_capsule_repos
      when: not (capsule_already_installed and not force_reinstall)
      tags: [repos, repositories]
    
    - role: parse_install_instructions
      when: not (capsule_already_installed and not force_reinstall)
      tags: [parse, instructions]
    
    - role: install_capsule
      when: not (capsule_already_installed and not force_reinstall)
      tags: [install, capsule]
  
  # ============================================================================
  # POST-TASKS: Verification and Reporting
  # ============================================================================
  post_tasks:
    - name: Verify Capsule services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
      register: service_status
      failed_when: false
      loop:
        - foreman-proxy
        - httpd
        - pulpcore-api
        - pulpcore-content
      when: verify_capsule_after_install | bool
    
    - name: Check Capsule health via API
      redhat.satellite.capsule_info:
        name: "{{ inventory_hostname }}"
      register: capsule_info
      failed_when: false
      when: verify_capsule_after_install | bool
    
    - name: Installation complete message
      ansible.builtin.debug:
        msg:
          - "============================================================"
          - "TEST ENVIRONMENT - Capsule Installation Completed!"
          - "============================================================"
          - "Capsule: {{ inventory_hostname }}"
          - "Status: {{ capsule_already_installed | ternary('Already installed', 'Newly installed') }}"
          - "============================================================"