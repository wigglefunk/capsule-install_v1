---
# Role: register_capsule
# Purpose: Register Capsule to Satellite using activation key
# Uses redhat.satellite collection to generate and execute registration
#
# CORRECTED VERSION - Fixed force parameter and script execution

# ============================================================================
# PHASE 1: VERIFY CONNECTIVITY TO SATELLITE
# ============================================================================

- name: Test connectivity to Satellite server
  ansible.builtin.uri:
    url: "{{ satellite_server_url }}/api/status"
    method: GET
    user: "{{ satellite_setup_username }}"
    password: "{{ satellite_initial_admin_password }}"
    force_basic_auth: true
    validate_certs: false
    timeout: 30
  register: satellite_connectivity
  failed_when: false

- name: Verify Satellite is accessible
  ansible.builtin.assert:
    that:
      - satellite_connectivity.status == 200
    fail_msg: |
      Cannot connect to Satellite server at {{ satellite_server_url }}
      Please verify:
      1. Network connectivity to Satellite
      2. Satellite services are running
      3. No firewall blocking access
    success_msg: "Satellite server is accessible"

# ============================================================================
# PHASE 2: GENERATE REGISTRATION COMMAND
# ============================================================================

# FIXED: Removed invalid 'force' parameter
- name: Generate registration command using redhat.satellite collection
  redhat.satellite.registration_command:
    server_url: "{{ satellite_server_url }}"
    username: "{{ satellite_setup_username }}"
    password: "{{ satellite_initial_admin_password }}"
    organization: "{{ satellite_org }}"
    location: "{{ satellite_location }}"
    activation_keys:
      - "{{ capsule_activation_key }}"
    insecure: true
    setup_insights: "{{ capsule_setup_insights }}"
    setup_remote_execution: "{{ capsule_enable_remote_execution }}"
    setup_remote_execution_pull: false
    update_packages: false
  register: registration_command

- name: Display registration command details
  ansible.builtin.debug:
    msg:
      - "Registration command generated successfully"
      - "Organization: {{ satellite_org }}"
      - "Activation Key: {{ capsule_activation_key }}"
      - "Remote Execution: {{ capsule_enable_remote_execution | ternary('Enabled', 'Disabled') }}"
      - "Insights: {{ capsule_setup_insights | ternary('Enabled', 'Disabled') }}"
  when: capsule_debug_output | bool

# ============================================================================
# PHASE 3: EXECUTE REGISTRATION
# ============================================================================

# FIXED: Direct shell execution instead of script module
# Handle force registration by appending --force flag
- name: Execute registration command
  ansible.builtin.shell: |
    set -e
    echo "Starting registration to Satellite: {{ satellite_fqdn }}"
    
    # Execute registration with optional force flag
    {{ registration_command.registration_command }} {{ capsule_force_registration | ternary('--force', '') }}
    
    # Verify registration succeeded
    if subscription-manager identity &>/dev/null; then
        echo "Registration successful!"
        exit 0
    else
        echo "Registration may have failed - please verify"
        exit 1
    fi
  register: registration_result
  async: "{{ registration_timeout }}"
  poll: 15
  args:
    executable: /bin/bash

- name: Display registration output
  ansible.builtin.debug:
    msg: "{{ registration_result.stdout_lines }}"
  when: capsule_debug_output | bool

# ============================================================================
# PHASE 4: VERIFY REGISTRATION
# ============================================================================

- name: Verify registration with subscription-manager
  ansible.builtin.command: subscription-manager identity
  register: identity_check
  changed_when: false

- name: Parse registration details
  ansible.builtin.set_fact:
    registered_org: "{{ identity_check.stdout | regex_search('org name: (.+)', '\\1') | first | default('Unknown') }}"
    registered_env: "{{ identity_check.stdout | regex_search('environment name: (.+)', '\\1') | first | default('Unknown') }}"

- name: Verify correct organization
  ansible.builtin.assert:
    that:
      - "satellite_org in registered_org"
    fail_msg: "Registered to wrong organization! Expected: {{ satellite_org }}, Got: {{ registered_org }}"
    success_msg: "Successfully registered to {{ satellite_org }}"

# ============================================================================
# PHASE 5: VERIFY IN SATELLITE USING HAMMER CLI
# ============================================================================

# FIXED: Using hammer command instead of non-existent host_info module
# Hammer is pre-configured with credentials and runs with root access
- name: Verify host appears in Satellite
  ansible.builtin.command: hammer host info --name "{{ inventory_hostname }}"
  register: host_in_satellite
  retries: 3
  delay: 10
  until: host_in_satellite.rc == 0
  changed_when: false
  failed_when: false
  delegate_to: localhost
  become: true

- name: Display host registration confirmation
  ansible.builtin.debug:
    msg:
      - "Host found in Satellite"
      - "  Name: {{ inventory_hostname }}"
      - "  Organization: {{ registered_org }}"
      - "  Environment: {{ registered_env }}"
  when: 
    - capsule_debug_output | bool
    - host_in_satellite.rc == 0

# ============================================================================
# FINAL STATUS REPORT
# ============================================================================

- name: Registration complete message
  ansible.builtin.debug:
    msg:
      - "================================================"
      - "Capsule Registration Completed Successfully"
      - "================================================"
      - "Capsule: {{ inventory_hostname }}"
      - "Organization: {{ registered_org }}"
      - "Environment: {{ registered_env }}"
      - "Activation Key: {{ capsule_activation_key }}"
      - "Remote Execution: {{ capsule_enable_remote_execution | ternary('Enabled', 'Disabled') }}"
      - "Next step: Configure repositories"
      - "================================================"